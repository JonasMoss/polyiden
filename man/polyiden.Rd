% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polyiden.R
\name{polyiden}
\alias{polyiden}
\title{Calculate the partial identification set for the latent correlation}
\usage{
polyiden(
  pi,
  marginals = c("normal", "uniform", "exponential", "laplace"),
  method = c("substitution", "direct"),
  symmetric = FALSE
)
}
\arguments{
\item{pi}{Matrix of probabilities.}

\item{marginals}{Specifies the marginal distribution. Either a named alternative
or a list containing the distribution functions, quantile functions, and
standard deviations for each marginal. Defaults to \code{"normal"}, which
uses standard normal marginals.}

\item{method}{The method used for integration. One of \verb{direct"} or \verb{"substitution}. Defaults
to \verb{"substitution}.}

\item{symmetric}{\code{TRUE} if the copula is symmetric, false otherwise. Not yet
implemented. Only \code{FALSE} is implemented.}
}
\value{
The identification bounds.
}
\description{
Find the partial identification set for the latent caorrelation of a \code{pi}
matrix when the marginals are known. If the marginals are unknown, the
identification set is \verb{(-1, 1)}.
}
\examples{

   # Make pi matrix from data.
   data = psychTools::bfi
   data = data[!is.na(data$A4), ]
   data = data[!is.na(data$A5), ]
   pi = table(data$A4, data$A5) / sum(table(data$A4, data$A5))

   # Find identification regions for the correlations for some marginals.
   polyiden::polyiden(pi, marginals = "normal") # [1] -0.2624196  0.7602734
   polyiden::polyiden(pi, marginals = "laplace") # [1] -0.3542015  0.7878503
   polyiden::polyiden(pi, marginals = "uniform") # [1] -0.1668584  0.7203827
   polyiden::polyiden(pi, marginals = "exponential") # [1] -0.2980032  0.8964526

   # Using custom t-distributed marginals with nu = 7 degrees of freedom.

   nu = 7
   tnu_marginals = list(
     quant1 = function(p) qt(p, nu),
     quant2 = function(p) qt(p, nu),
     dens1 = function(q) dt(q, nu),
     dens2 = function(q) dt(q, nu),
     sd1 = sqrt(nu/(nu - 2)),
     sd2 = sqrt(nu/(nu - 2))
   )

   polyiden::polyiden(pi, marginals = tnu_marginals) # [1] -0.3225405  0.7783182

}
