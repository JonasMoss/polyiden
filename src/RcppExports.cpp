// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// lower_limit_cpp
arma::vec lower_limit_cpp(const arma::vec& u, const arma::vec& v, const arma::mat& cum_pi);
RcppExport SEXP _polyiden_lower_limit_cpp(SEXP uSEXP, SEXP vSEXP, SEXP cum_piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type cum_pi(cum_piSEXP);
    rcpp_result_gen = Rcpp::wrap(lower_limit_cpp(u, v, cum_pi));
    return rcpp_result_gen;
END_RCPP
}
// upper_limit_cpp
arma::vec upper_limit_cpp(const arma::vec& u, const arma::vec& v, const arma::mat& cum_pi);
RcppExport SEXP _polyiden_upper_limit_cpp(SEXP uSEXP, SEXP vSEXP, SEXP cum_piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type cum_pi(cum_piSEXP);
    rcpp_result_gen = Rcpp::wrap(upper_limit_cpp(u, v, cum_pi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_polyiden_lower_limit_cpp", (DL_FUNC) &_polyiden_lower_limit_cpp, 3},
    {"_polyiden_upper_limit_cpp", (DL_FUNC) &_polyiden_upper_limit_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_polyiden(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
